version: '3.8'

services:
  # Main OCR Application
  ocr-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: ocr-production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PRODUCTION_MODE=true
      - DATABASE_URL=postgresql://ocr_user:${DB_PASSWORD}@postgres:5432/ocr_production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ocr-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ocr_production
      - POSTGRES_USER=ocr_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ocr_user -d ocr_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: ocr-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ocr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ocr-app
    networks:
      - ocr-network

  # Performance Monitor
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: ocr-monitor
    restart: unless-stopped
    command: ["python", "performance_monitor.py"]
    environment:
      - PRODUCTION_MODE=true
    volumes:
      - ./logs:/app/logs
      - ./metrics:/app/metrics
    depends_on:
      - ocr-app
    networks:
      - ocr-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ocr-backup
    restart: "no"
    environment:
      - POSTGRES_DB=ocr_production
      - POSTGRES_USER=ocr_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh
    command: ["/backup-script.sh"]
    depends_on:
      - postgres
    networks:
      - ocr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ocr-network:
    driver: bridge
